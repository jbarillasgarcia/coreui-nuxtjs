{"remainingRequest":"/home/abarillas/projects/CoreUI_Nuxt3/public_html/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/abarillas/projects/CoreUI_Nuxt3/public_html/src/views/forms/ValidationForms.vue?vue&type=style&index=0&id=343f588c&scoped=true&lang=css&","dependencies":[{"path":"/home/abarillas/projects/CoreUI_Nuxt3/public_html/src/views/forms/ValidationForms.vue","mtime":1542198414000},{"path":"/home/abarillas/projects/CoreUI_Nuxt3/public_html/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/abarillas/projects/CoreUI_Nuxt3/public_html/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/abarillas/projects/CoreUI_Nuxt3/public_html/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/abarillas/projects/CoreUI_Nuxt3/public_html/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.btn.disabled {\n  cursor: auto;\n}\n",{"version":3,"sources":["ValidationForms.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuQA;AACA;AACA","file":"ValidationForms.vue","sourceRoot":"src/views/forms","sourcesContent":["<template>\n  <div class=\"animated fadeIn\">\n    <b-card no-body>\n      <b-card-header>\n        <i class=\"icon-note\"></i> Form Validation\n        <a class=\"badge badge-danger\" href=\"https://coreui.io/pro/vue/\">CoreUI Pro</a>\n        <div class=\"card-header-actions\">\n          <a class=\"card-header-action\" href=\"https://github.com/monterail/vuelidate\" target=\"_blank\" rel=\"noreferrer noopener\">\n            <small class=\"text-muted\">docs</small>\n          </a>\n        </div>\n      </b-card-header>\n      <b-card-body>\n        <b-link href=\"https://monterail.github.io/vuelidate\" target=\"_blank\" rel=\"noreferrer noopener\">Vuelidate</b-link> provides <cite>Simple, lightweight model-based validation for Vue.js</cite>\n        <hr>\n        <b-row>\n          <b-col lg=\"6\">\n            <!--<h6>Simple Form</h6>-->\n            <b-form v-on:submit.prevent=\"onSubmit\" v-on:reset.prevent=\"onReset\" novalidate>\n              <b-form-group id=\"firstNameInputGroup1\"\n                            label=\"First Name\"\n                            label-for=\"firstname\">\n                <b-form-input id=\"firstName\"\n                              type=\"text\"\n                              v-model.lazy.trim=\"$v.form.firstName.$model\"\n                              :state=\"chkState('firstName')\"\n                              aria-describedby=\"input1LiveFeedback1\"\n                              placeholder=\"First Name\"\n                              autocomplete='given-name'\n                              autofocus />\n                <b-form-invalid-feedback id=\"input1LiveFeedback1\">\n                  This is a required field and must be at least 2 characters\n                </b-form-invalid-feedback>\n              </b-form-group>\n              <b-form-group id=\"lastNameInputGroup2\"\n                            label=\"Last Name\"\n                            label-for=\"lastName\">\n                <b-form-input id=\"lastName\"\n                              type=\"text\"\n                              v-model.lazy.trim=\"$v.form.lastName.$model\"\n                              :state=\"chkState('lastName')\"\n                              aria-describedby=\"input1LiveFeedback2\"\n                              placeholder=\"Last Name\"\n                              autocomplete='family-name'/>\n                <b-form-invalid-feedback id=\"input1LiveFeedback2\">\n                  This is a required field and must be at least 1 character\n                </b-form-invalid-feedback>\n              </b-form-group>\n              <b-form-group id=\"userNameInputGroup3\"\n                            label=\"User Name\"\n                            label-for=\"userName\">\n                <b-form-input id=\"userName\"\n                              type=\"text\"\n                              v-model.trim=\"$v.form.userName.$model\"\n                              :state=\"chkState('userName')\"\n                              aria-describedby=\"input1LiveFeedback3\"\n                              placeholder=\"User Name\"\n                              autocomplete='username' />\n                <b-form-invalid-feedback id=\"input1LiveFeedback3\">\n                  This is a required field and must be at least 5 characters\n                </b-form-invalid-feedback>\n              </b-form-group>\n              <b-form-group id=\"emailInputGroup4\"\n                            label=\"Email\"\n                            label-for=\"email\">\n                <b-form-input id=\"email\"\n                              type=\"email\"\n                              v-model.trim=\"$v.form.email.$model\"\n                              :state=\"chkState('email')\"\n                              aria-describedby=\"input1LiveFeedback4\"\n                              placeholder=\"Email\"\n                              autocomplete='email' />\n                <b-form-invalid-feedback id=\"input1LiveFeedback4\">\n                  This is a required field and must be valid e-mail address\n                </b-form-invalid-feedback>\n              </b-form-group>\n              <b-row>\n                <b-col md=\"6\">\n                  <b-form-group id=\"passInputGroup5\"\n                                label=\"Password\"\n                                label-for=\"password\">\n                    <b-form-input id=\"password\"\n                                  type=\"password\"\n                                  v-model.trim=\"$v.form.password.$model\"\n                                  :state=\"chkState('password')\"\n                                  aria-describedby=\"input1LiveFeedback5\"\n                                  placeholder=\"Password\"\n                                  autocomplete='new-password' />\n                    <b-form-invalid-feedback id=\"input1LiveFeedback5\">\n                      Required password containing at least: number, uppercase and lowercase letter, 8 characters\n                    </b-form-invalid-feedback>\n                  </b-form-group>\n\n                </b-col>\n                <b-col md=\"6\">\n                  <b-form-group id=\"confPassInputGroup6\"\n                                label=\"Confirm password\"\n                                label-for=\"confirm_password\">\n                    <b-form-input id=\"confirm_password\"\n                                  type=\"password\"\n                                  v-model.trim=\"$v.form.confirmPassword.$model\"\n                                  :state=\"chkState('confirmPassword')\"\n                                  aria-describedby=\"input1LiveFeedback6\"\n                                  placeholder=\"Confirm password\"\n                                  autocomplete='new-password' />\n                    <b-form-invalid-feedback id=\"input1LiveFeedback6\">\n                      Passwords must match\n                    </b-form-invalid-feedback>\n                  </b-form-group>\n\n                </b-col>\n              </b-row>\n              <b-form-group :invalid-feedback=\"invCheck\" :state=\"chkState('accept')\">\n                <b-form-checkbox id=\"accept\"\n                                 v-model=\"$v.form.accept.$model\"\n                                 :state=\"chkState('accept')\"\n                                 aria-describedby=\"input1LiveFeedback7\">\n                  <strong>I accept the terms of use</strong>\n                </b-form-checkbox>\n              </b-form-group>\n              <b-button type=\"submit\" variant=\"primary\" :disabled=\"$v.form.$invalid || submitted\">\n                Submit\n              </b-button>\n              <b-button class=\"ml-1\" type=\"submit\" variant=\"success\" :disabled=\"!$v.form.$invalid\">\n                Validate\n              </b-button>\n              <b-button class=\"ml-1\" type=\"reset\" variant=\"danger\" :disabled=\"!isDirty\">Reset</b-button>\n            </b-form>\n            <br/>\n          </b-col>\n          <b-col lg=\"6\">\n            <b-card :bg-variant=\"feedBack\">\n              <pre>{{formStr}}</pre>\n            </b-card>\n          </b-col>\n        </b-row>\n      </b-card-body>\n    </b-card>\n  </div>\n</template>\n\n<script>\nimport { validationMixin } from \"vuelidate\"\nimport { required, minLength, email, sameAs, helpers } from \"vuelidate/lib/validators\"\n\nconst mustAccept = value => {\n  return Boolean(value)\n}\nconst strongPass = helpers.regex('strongPass', /(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}/)\n\n\nconst formShape = {\n  firstName: \"\",\n  lastName: \"\",\n  userName: \"\",\n  email: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n  accept: false\n}\n\nexport default {\n  name: \"ValidationForms\",\n  data() {\n    return {\n      form: Object.assign({}, formShape),\n      feedBack: 'secondary',\n      submitted: false\n    }\n  },\n  computed: {\n    formStr() { return JSON.stringify(this.form, null, 4) },\n    isValid() { return !this.$v.form.$anyError },\n    isDirty() { return this.$v.form.$anyDirty },\n    invCheck() { return 'You must accept before submitting' },\n  },\n  mixins: [validationMixin],\n  validations: {\n    form: {\n      firstName: {\n        required,\n        minLength: minLength(2)\n      },\n      lastName: {\n        required,\n        minLength: minLength(1)\n      },\n      userName: {\n        required,\n        minLength: minLength(5)\n      },\n      email: {\n        required,\n        email\n      },\n      password: {\n        required,\n        minLength: minLength(8),\n        strongPass\n      },\n      confirmPassword: {\n        required,\n        sameAsPassword: sameAs(\"password\")\n      },\n      accept: {\n        required,\n        mustAccept\n      }\n    }\n  },\n  methods: {\n    onSubmit() {\n      if (this.validate()) {\n        this.$nextTick(() => {\n          // submit\n          // console.log('submit:', this.formStr)\n          this.submitted = true\n          this.feedBack = 'info'\n        })\n      }\n    },\n    onReset() {\n      // Reset validation\n      this.form = Object.assign({}, formShape)\n      this.submitted = false\n      this.$nextTick(() => {\n        this.$v.$reset()\n        this.feedBack = 'secondary'\n      })\n    },\n    chkState(val) {\n      const field = this.$v.form[val]\n      return !field.$dirty || !field.$invalid\n    },\n    findFirstError(component = this) {\n      if (component.state === false) {\n        if (component.$refs.input) {\n          component.$refs.input.focus()\n          return true\n        }\n        if (component.$refs.check) {\n          component.$refs.check.focus()\n          return true\n        }\n      }\n      let focused = false\n      component.$children.some((child) => {\n        focused = this.findFirstError(child)\n        return focused\n      })\n\n      return focused\n    },\n    validate() {\n      this.$v.$touch()\n      this.$nextTick(() => this.findFirstError())\n      return this.isValid\n    }\n  }\n}\n</script>\n\n<style scoped>\n.btn.disabled {\n  cursor: auto;\n}\n</style>\n"]}]}