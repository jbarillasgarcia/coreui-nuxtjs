'use strict';

exports.__esModule = true;

var _kindergarten = require('kindergarten');

var _getChild = require('./getChild');

var _getChild2 = _interopRequireDefault(_getChild);

var _getGoverness = require('./getGoverness');

var _getGoverness2 = _interopRequireDefault(_getGoverness);

var _getPerimeters = require('./getPerimeters');

var _getPerimeters2 = _interopRequireDefault(_getPerimeters);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var Vue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      child = _ref.child,
      useSandboxMethods = _ref.useSandboxMethods,
      exposePurpose = _ref.exposePurpose;

  if (!Vue.mixin) {
    throw new _kindergarten.ArgumentError('Vue must be instance of Vue. Did you initialize the plugin properly?');
  }

  Vue.mixin({
    beforeCreate: function beforeCreate() {
      var options = (this || {}).$options;
      var store = this.$store || null;
      var rootOptions = this.$root.$options;

      var perimeters = (0, _getPerimeters2.default)(options.perimeters || rootOptions.perimeters);
      var governess = (0, _getGoverness2.default)(options.governess || rootOptions.governess);
      var sandboxChild = function sandboxChild() {
        return (0, _getChild2.default)(child, { store: store });
      };
      var sandboxGetter = function sandboxGetter() {
        return (0, _kindergarten.createSandbox)(sandboxChild(), {
          governess: governess,
          perimeters: perimeters
        });
      };

      var sandbox = sandboxGetter();

      options.computed = options.computed || {};
      options.methods = options.methods || {};

      options.computed.$sandbox = sandboxGetter;

      // Add helper methods from sandbox
      (useSandboxMethods || []).forEach(function (methodName) {
        var $methodName = '$' + methodName;
        var sandboxMethod = sandbox[methodName];
        options.computed[$methodName] = typeof sandboxMethod === 'function' ? function () {
          return sandboxMethod.bind(sandboxGetter());
        } : function () {
          return sandboxMethod;
        };
      });

      // Add purpose
      if (exposePurpose) {
        sandbox.getPerimeters().forEach(function (perimeter) {
          var purpose = perimeter.getPurpose();
          options.computed['$' + purpose] = function () {
            return sandboxGetter()[purpose];
          };
        });
      }
    }
  });
};